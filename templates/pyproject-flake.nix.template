# templates/flake.nix.template
#
# This file is a flake template.
#
# Copyright (C) 2023-today rydnr's pythoneda-artifact/git
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
{{
  description = "{description}";
  inputs = rec {{
{inputs}
  }};
  outputs = inputs:
    with inputs;
    flake-utils.lib.eachDefaultSystem (system:
      let
        pname = "{name}";
        version = "{version}";
        pkgs = import nixos {{ inherit system; }};
        entrypoint = "{name}";
        entrypoint-path = "${{entrypoint}}.sh";
        description = "{description}";
        license = pkgs.lib.licenses.gpl3;
        maintainers = [ "rydnr <github@acm-sl.org>" ];
        archRole = "{archRole}";
        space = "{pescioSpace}";
        layer = "{hexagonalLayer}";
        nixosVersion = builtins.readFile "${{nixos}}/.version";
        nixpkgsRelease = "nixos-${{nixosVersion}}";
        shared = import "${{pythoneda-shared-pythoneda-banner}}/nix/shared.nix";
        {name}-for = {{ python, {flake_dependencies_as_parameter_declaration} }}:
          let
            pnameWithUnderscores =
              builtins.replaceStrings [ "-" ] [ "_" ] pname;
            pythonVersionParts = builtins.splitVersion python.version;
            pythonMajorVersion = builtins.head pythonVersionParts;
            pythonMajorMinorVersion =
              "${{pythonMajorVersion}}.${{builtins.elemAt pythonVersionParts 1}}";
            wheelName =
              "${{pnameWithUnderscores}}-${{version}}-py${{pythonMajorVersion}}-none-any.whl";
          in python.pkgs.buildPythonPackage rec {{
            inherit pname version;
            projectDir = ./.;
            package = "_unused";
            pyprojectTemplateFile = ./pyprojecttoml.template;
            pyprojectTemplate = pkgs.substituteAll {{
              authors = builtins.concatStringsSep ","
                (map (item: ''"${{item}}"'') maintainers);
              desc = description;
              jupyterlabVersion = python.pkgs.jupyterlab.version;
              inherit package pname pythonMajorMinorVersion version;
              {flake_dependencies_version_pyproject_declaration}
              src = pyprojectTemplateFile;
            }};

            format = "pyproject";

            nativeBuildInputs = with python.pkgs; [ pip pkgs.jq poetry-core ];
            propagatedBuildInputs = with python.pkgs; [
              {flake_dependencies_as_build_inputs}
            ];

            unpackPhase = ''
              cp -r ${{projectDir}} .
              sourceRoot=$(ls | grep -v env-vars)
              chmod +w $sourceRoot
              cp ${{pyprojectTemplate}} $sourceRoot/pyproject.toml
              mkdir $sourceRoot/${{package}}
              touch $sourceRoot/${{package}}/__init__.py
            '';

            postInstall = ''
              mkdir $out/bin
              echo "Creating $out/bin/${{entrypoint-path}}"
              echo '#!/usr/bin/env sh' > $out/bin/${{entrypoint-path}}
              echo "export PYTHONPATH=$PYTHONPATH" >> $out/bin/${{entrypoint-path}}
              echo "Running code-request.ipynb" >> $out/bin/${{entrypoint-path}}
              echo "jupyter lab ./code-request.ipynb" >> $out/bin/${{entrypoint-path}}
              chmod +x $out/bin/${{entrypoint-path}}
              ls -lia $out/bin
            '';

            meta = with pkgs.lib; {{
              inherit description homepage license maintainers;
            }};
          }};
      in rec {{
        apps = rec {{
          default = {name}-default;
          {name}-default = {name}-python310;
          {name}-python38 = shared.app-for {{
            package = self.packages.${{system}}.{name}-python38;
            inherit entrypoint;
          }};
          {name}-python39 = shared.app-for {{
            package = self.packages.${{system}}.{name}-python39;
            inherit entrypoint;
          }};
          {name}-python310 = shared.app-for {{
            package = self.packages.${{system}}.{name}-python310;
            inherit entrypoint;
          }};
        }};
        defaultApp = apps.default;
        defaultPackage = packages.default;
        packages = rec {{
          default = {name}-default;
          {name}-python38 = {name}-for {{
            python = pkgs.python38;
            {flake_dependencies_as_parameters_for_python38}
          }};
          code-request-python39 = code-request-for {{
            python = pkgs.python39;
            {flake_dependencies_as_parameters_for_python39}
          }};
          code-request-python310 = code-request-for {{
            python = pkgs.python310;
            {flake_dependencies_as_parameters_for_python310}
          }};
          {name}-default = {name}-python310;
        }};
      }});
}}
